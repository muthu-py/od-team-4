// Middleware to check if user is admin
const isAdmin = async (req, res, next) => {
    try {
        const token = req.headers.authorization?.split(' ')[1];
        if (!token) {
            return res.status(401).json({ message: 'Authentication required' });
        }

        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        const user = await User.findById(decoded.userId);

        if (!user || user.role !== 'admin') {
            return res.status(403).json({ message: 'Admin access required' });
        }

        next();
    } catch (error) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

// Get all users (admin only)
app.get('/api/users', isAdmin, async (req, res) => {
    try {
        const users = await User.find().select('-password');
        res.json({ users });
    } catch (error) {
        console.error('Error fetching users:', error);
        res.status(500).json({ message: 'Server error' });
    }
});

// Create new user (admin only)
app.post('/api/users', isAdmin, async (req, res) => {
    try {
        const { name, email, password, role, mentor, cls_advisor } = req.body;

        // Check if user already exists
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        // Create new user with plain text password (as per your current setup)
        const user = new User({
            name,
            email,
            password,
            role
        });

        // If creating a student, handle mentor and class advisor relationships
        if (role === 'student' && (mentor || cls_advisor)) {
            if (mentor) {
                const mentorUser = await User.findById(mentor);
                if (!mentorUser || mentorUser.role !== 'teacher') {
                    return res.status(400).json({ message: 'Invalid mentor selected' });
                }
                user.mentor = mentor;
                // Add student to mentor's mentees array
                mentorUser.mentees.push(user._id);
                await mentorUser.save();
            }

            if (cls_advisor) {
                const advisorUser = await User.findById(cls_advisor);
                if (!advisorUser || advisorUser.role !== 'teacher') {
                    return res.status(400).json({ message: 'Invalid class advisor selected' });
                }
                user.cls_advisor = cls_advisor;
                // Add student to advisor's class_students array
                advisorUser.class_students.push(user._id);
                await advisorUser.save();
            }
        }

        await user.save();

        // Return user without password
        const userResponse = user.toObject();
        delete userResponse.password;

        res.status(201).json({ 
            message: 'User created successfully',
            user: userResponse
        });
    } catch (error) {
        console.error('Error creating user:', error);
        res.status(500).json({ message: 'Server error' });
    }
});

// Delete user (admin only)
app.delete('/api/users/:id', isAdmin, async (req, res) => {
    try {
        const token = req.headers.authorization?.split(' ')[1];
        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        const adminId = decoded.userId;

        // Check if trying to delete own account
        if (adminId === req.params.id) {
            return res.status(403).json({ message: 'Admins cannot delete their own account' });
        }

        const user = await User.findById(req.params.id);
        if (!user) {
            return res.status(404).json({ message: 'User not found' });
        }

        await user.deleteOne();
        res.json({ message: 'User deleted successfully' });
    } catch (error) {
        console.error('Error deleting user:', error);
        res.status(500).json({ message: 'Server error' });
    }
});

// Update user (admin only)
app.put('/api/users/:id', isAdmin, async (req, res) => {
    try {
        const { name, email, role, mentor, cls_advisor } = req.body;
        const userId = req.params.id;

        // Find the user
        const user = await User.findById(userId);
        if (!user) {
            return res.status(404).json({ message: 'User not found' });
        }

        // Update basic information
        user.name = name;
        user.email = email;
        user.role = role;

        // Handle mentor relationship
        if (user.role === 'student') {
            // Remove old mentor relationship if exists
            if (user.mentor) {
                const oldMentor = await User.findById(user.mentor);
                if (oldMentor) {
                    oldMentor.mentees = oldMentor.mentees.filter(id => id.toString() !== userId);
                    await oldMentor.save();
                }
            }

            // Add new mentor relationship if specified
            if (mentor) {
                const mentorUser = await User.findById(mentor);
                if (!mentorUser || mentorUser.role !== 'teacher') {
                    return res.status(400).json({ message: 'Invalid mentor selected' });
                }
                user.mentor = mentor;
                mentorUser.mentees.push(userId);
                await mentorUser.save();
            }

            // Remove old class advisor relationship if exists
            if (user.cls_advisor) {
                const oldAdvisor = await User.findById(user.cls_advisor);
                if (oldAdvisor) {
                    oldAdvisor.class_students = oldAdvisor.class_students.filter(id => id.toString() !== userId);
                    await oldAdvisor.save();
                }
            }
            // Add new class advisor relationsif (cls_advisor) {
                const advisorUser = await User.findById(cls_advisor);
                if (!advisorUser || advisorUser.role !== 'teacher') {
                    return res.status(400).json({ message: 'Invalid class advisor selected' });
                }
                user.cls_advisor = cls_advisor;
                advisorUser.class_students.push(userId);
                await advisorUser.save();
            }
        }

        await user.save();

        // Return updated user without password
        const userResponse = user.toObject();
        delete userResponse.password;

        res.json({ 
            message: 'User updated successfully',
            user: userResponse
        });
    } catch (error) {
        console.error('Error updating user:', error);
        res.status(500).json({ message: 'Server error' });
    }
});